package cache

import (
	"math/rand"
	"sync"

	"github.com/dgryski/go-wyhash"
)

// SentReasonsCache is a cache of reasons a trace was sent.
// It acts as a mapping between the string representation of send reason
// and a uint.
// This is used to reduce the memory footprint of the trace cache.
type SentReasonsCache struct {
	// TODO: maybe add a metric for the size of this cache?
	data    []string
	keys    map[uint64]uint
	counter uint

	mu       sync.Mutex
	hashSeed uint64
}

// NewSentReasonsCache returns a new SentReasonsCache.
func NewSentReasonsCache() *SentReasonsCache {
	return &SentReasonsCache{
		keys:     make(map[uint64]uint),
		hashSeed: rand.Uint64(),
	}
}

// Set adds a new reason to the cache, returning the key.
// The key is generated by incrementing a counter.
func (c *SentReasonsCache) Set(key string) int {
	c.mu.Lock()
	defer c.mu.Unlock()
	// generate a hash
	hash := wyhash.Hash([]byte(key), c.hashSeed)

	val, ok := c.keys[hash]
	if !ok {
		c.data = append(c.data, key)
		c.counter++
		c.keys[hash] = c.counter
		val = c.counter
	}
	return int(val)
}

// Get returns a reason from the cache, if it exists.
func (c *SentReasonsCache) Get(key uint) (string, bool) {
	if key == 0 {
		return "", false
	}
	return c.data[key-1], true
}
