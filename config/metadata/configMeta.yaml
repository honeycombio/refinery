# This contains a list of all of the config items supported by Refinery.
#
# This file is a YAML file containing configuration information for all of the values in Refinery.
# If you modify this file, you must `cd tools/convert` and run `make all` to regenerate the
# dependent files. Note that refinery_config.md and refinery_rules.md are used by the documentation
# system, so you must also copy them to the docs directory and create a PR there.
groups:
  - name: "General"
    title: "General Configuration"
    description: contains general configuration options that apply to the entire Refinery process.
    fields:
      - name: ConfigurationVersion
        type: int
        valuetype: assigndefault
        default: 2
        reload: false
        validations:
          - type: required
        firstversion: v2.0
        summary: is the file format of this particular configuration file.
        description: >
          This file is version 2.

          This field is required. It exists to allow the configuration system to
          adapt to future changes in the configuration file format.

      - name: MinRefineryVersion
        type: string
        valuetype: assigndefault
        default: "v2.0"
        reload: false
        firstversion: v2.0
        validations:
          - type: format
            arg: version
        summary: is the minimum version of Refinery that can load this configuration file.
        description: >
          This setting specifies the lowest Refinery version capable of loading
          all of the features used in this file. If this value is present,
          then Refinery will refuse to start if its version is less than this
          setting.

      - name: DatasetPrefix
        type: string
        valuetype: nondefault
        default: ""
        reload: false
        validations:
          - type: format
            arg: alphanumeric
        summary: is a prefix that can be used to distinguish a dataset from an environment in the rules.
        description: >
          If telemetry is being sent to both a classic dataset and a new
          environment called the same thing, such as `production`, then this
          parameter can be used to distinguish these cases. When Refinery
          receives telemetry using an API key associated with a Honeycomb
          Classic dataset, it will then use the prefix in the form `{prefix}.
          {dataset}` when trying to resolve the rules definition.

      - name: ConfigReloadInterval
        type: duration
        valuetype: nondefault
        default: 15s
        reload: false
        validations:
          - type: minimum
            arg: 0s
        summary: is the average interval between attempts at reloading the configuration file.
        description: >
          Refinery will attempt to read its configuration and check for changes
          at approximately this interval. This time is varied by a random amount
          up to 10% to avoid all instances refreshing together. In installations
          where configuration changes are handled by restarting Refinery, which
          is often the case when using Kubernetes, disable this feature with a
          value of `0s`. If the config file is being loaded from a URL, it may
          be wise to increase this value to avoid overloading the file server.

  - name: Network
    title: "Network Configuration"
    description: contains network configuration options.
    fields:
      - name: ListenAddr
        type: hostport
        valuetype: nondefault
        default: "0.0.0.0:8080"
        reload: false
        validations:
          - type: notempty
        envvar: REFINERY_HTTP_LISTEN_ADDRESS
        commandLine: http-listen-address
        summary: is the address where Refinery listens for incoming requests.
        description: >
          This setting is the IP and port on which Refinery listens for
          incoming HTTP requests. These requests include traffic formatted as
          Honeycomb events, proxied requests to the Honeycomb API, and
          OpenTelemetry data using the `http` protocol. Incoming traffic is
          expected to be HTTP, so if SSL is a requirement, put something like
          `nginx` in front to do the decryption.

      - name: PeerListenAddr
        default: "0.0.0.0:8081"
        type: hostport
        valuetype: nondefault
        reload: false
        validations:
          - type: notempty
        envvar: REFINERY_PEER_LISTEN_ADDRESS
        commandLine: peer-listen-address
        summary: is the IP and port on which to listen for traffic being rerouted from a peer.
        description: >
          Incoming traffic is expected to be HTTP, so if using SSL
          use something like nginx or a load balancer to do the decryption.

      - name: HTTPIdleTimeout
        type: duration
        valuetype: nondefault
        reload: false
        firstversion: v2.2
        default: 0s
        validations:
          - type: minOrZero
            arg: 1s
        summary: is the duration the http server waits for activity on the connection.
        description: >
          This is the amount of time after which if the http server does not see any
          activity, then it pings the client to see if the transport is still
          alive. "0s" means no timeout.

      - name: HoneycombAPI
        type: url
        valuetype: nondefault
        default: "https://api.honeycomb.io"
        reload: true
        validations:
          - type: notempty
        envvar: REFINERY_HONEYCOMB_API
        commandLine: honeycomb-api
        summary: is the URL of the upstream Honeycomb API where the data will be sent.
        description: >
          This setting is the destination to which Refinery sends all events
          that it decides to keep.

  - name: AccessKeys
    title: "Access Key Configuration"
    description: >
      contains access keys -- API keys that the proxy will treat specially, and
      other flags that control how the proxy handles API keys.
    fields:
      - name: ReceiveKeys
        type: stringarray
        valuetype: stringarray
        v1name: APIKeys
        example: "your-key-goes-here"
        reload: false
        validations:
          - type: elementType
            arg: string
        summary: is a set of Honeycomb API keys that the proxy will treat specially.
        description: >
          This list only applies to span traffic - other Honeycomb API actions
          will be proxied through to the upstream API directly without modifying
          keys.

      - name: AcceptOnlyListedKeys
        type: bool
        valuetype: conditional
        extra: nostar APIKeys
        default: false
        reload: true
        validation:
          - type: requiredWith
            arg: ReceiveKeys
        summary: is a boolean flag that causes events arriving with API keys not in the `ReceiveKeys` list to be rejected.
        description: >
          If `true`, then only traffic using the keys listed in `ReceiveKeys` is
          accepted. Events arriving with API keys not in the `ReceiveKeys` list
          will be rejected with an HTTP `401` error.

          If `false`, then all traffic is accepted and `ReceiveKeys` is ignored.

  - name: RefineryTelemetry
    title: "Refinery Telemetry"
    description: contains configuration information for the telemetry that Refinery uses to record its own operation.
    fields:
      - name: AddRuleReasonToTrace
        type: bool
        valuetype: nondefault
        default: false
        example: true
        reload: true
        summary: controls whether to decorate traces with Refinery rule evaluation results.
        description: >
          When enabled, this setting causes traces that are sent to Honeycomb
          to include the field `meta.refinery.reason`. This field contains text
          indicating which rule was evaluated that caused the trace to be
          included.

          This setting also includes the field `meta.refinery.send_reason`,
          which contains the reason that the trace was sent. Possible values of
          this field are `trace_send_got_root`, which means that the root span
          arrived; `trace_send_expired`, which means that TraceTimeout was reached;
          `trace_send_ejected_full`, which means that the trace cache was full; and
          `trace_send_ejected_memsize`, which means that refinery was out of memory.

          These names are also the names of metrics that refinery tracks.

          We recommend enabling this setting whenever a rules-based
          sampler is in use, as it is useful for debugging and understanding
          the behavior of your Refinery installation.

      - name: AddSpanCountToRoot
        type: defaulttrue
        valuetype: nondefault
        default: true
        reload: true
        validations:
        summary: controls whether to add a metadata field to root spans that indicates the number of child elements in a trace.
        description: >
          The added metadata field, `meta.span_count`, indicates
          the number of child elements on the trace at the time the sampling
          decision was made. This value is available to the rules-based sampler,
          making it possible to write rules that are dependent upon the number
          of spans, span events, and span links in the trace. If `true` and `AddCountsToRoot` is set to false, then Refinery
          will add `meta.span_count` to the root span.

      - name: AddCountsToRoot
        type: bool
        valuetype: nondefault
        firstversion: v2.2
        default: false
        reload: true
        summary: controls whether to add metadata fields to root spans that indicates the number of child spans, span events, span links, and honeycomb events.
        description: >
          If `true`, then Refinery will ignore the `AddSpanCountToRoot` setting and add the following fields to the root
          span based on the values at the time the sampling decision was made:

          - `meta.span_count`: the number of child spans on the trace

          - `meta.span_event_count`: the number of span events on the trace

          - `meta.span_link_count`: the number of span links on the trace

          - `meta.event_count`: the number of honeycomb events on the trace

      - name: AddHostMetadataToTrace
        type: defaulttrue
        valuetype: nondefault
        default: true
        reload: true
        summary: specifies whether to add host metadata to traces.
        description: >
          If `true`, then Refinery will add the following tag to all
          traces:
          - `meta.refinery.host.name`: the hostname of the Refinery node

  - name: Traces
    title: "Traces"
    description: contains configuration for how traces are managed.
    fields:
      - name: SendDelay
        type: duration
        valuetype: nondefault
        default: 2s
        reload: true
        summary: is the duration to wait before sending a trace.
        description: >
          This setting is a short timer that is triggered when a trace is
          complete. Refinery waits for this duration before sending the trace.
          The reason for this setting is to allow for small network delays or
          clock jitters to elapse and any final spans to arrive before sending
          the trace. Set to "0" for immediate sending.

      - name: BatchTimeout
        type: duration
        valuetype: nonzero
        example: 500ms
        reload: true
        summary: is how frequently Refinery sends unfulfilled batches.
        description: >
          By default, this setting uses the `DefaultBatchTimeout` in `libhoney` as its value, which is `100ms`.

      - name: TraceTimeout
        type: duration
        valuetype: nondefault
        default: 60s
        reload: true
        summary: is the duration to wait before making the trace decision on an incomplete trace.
        description: >
          A long timer; it represents the outside boundary of how long to wait
          before making the trace decision about an incomplete trace.

          Normally trace decisions (send or drop) are made when the root span
          arrives. Sometimes the root span never arrives (for example, due to
          crashes). Once this timer fires, Refinery will make a trace decision
          based on the spans that have arrived so far. This ensures sending a
          trace even when the root span never arrives.

          After the trace decision has been made, Refinery retains a record of
          that decision for a period of time. When additional spans (including
          the root span) arrive, they will be kept or dropped based on the
          original decision. 

          When running Refinery with Redis as the central store, this timer is
          also used to determine how long to keep trace decisions in Redis.
          Refinery will keep trace decisions in Redis for 10 times the value of
          this timer or 15 minutes, whichever is greater.

          If particularly long-lived traces are present in your data, then you
          should increase this timer. Note that this increase will also
          increase the memory requirements for Refinery.

      - name: MaxBatchSize
        type: int
        valuetype: nondefault
        default: 500
        reload: true
        validations:
          - type: minimum
            arg: 100
        summary: is the maximum number of events to be included in each batch for sending.
        description: >
          This value is used to set the `BatchSize` field in the `libhoney`
          library used to send data to Honeycomb.

          If you have particularly large traces, then you should increase this
          value. Note that this will also increase the memory requirements for
          Refinery.

      - name: SendTicker
        type: duration
        valuetype: nondefault
        default: 100ms
        reload: true
        summary: is the interval between checks for traces to send.
        description: >
          A short timer that determines the duration between trace cache review
          runs to send. Increasing this will spend more time processing incoming
          events to reduce `incoming_` or `peer_router_dropped` spikes.
          Decreasing this will check the trace cache for timeouts more
          frequently.

  - name: Debugging
    title: "Debugging"
    description: contains configuration values used when setting up and debugging Refinery.
    fields:
      - name: DebugServiceAddr
        type: hostport
        valuetype: nonemptystring
        example: "localhost:6060"
        reload: false
        summary: is the IP and port where the debug service runs.
        description: >
          The debug service is generally only used when debugging Refinery
          itself, and will only run if the command line option `-d` is
          specified. If this value is not specified, then the debug service
          runs on the first open port between `localhost:6060` and
          `localhost:6069`.

      - name: QueryAuthToken
        type: string
        valuetype: nonemptystring
        example: "some-private-value"
        reload: false
        envvar: REFINERY_QUERY_AUTH_TOKEN
        commandline: query-auth-token
        summary: is the token that must be specified to access the `/query` endpoint.
        description: >
          This token must be specified with the header
          "X-Honeycomb-Refinery-Query" in order for a `/query` request to
          succeed. These `/query` requests are intended for debugging Refinery
          during setup and are not typically needed in normal operation. If not
          specified, then the `/query` endpoints are inaccessible.

      - name: AdditionalErrorFields
        type: stringarray
        valuetype: stringarray
        example: "trace.span_id"
        reload: true
        validations:
          - type: elementType
            arg: string
        summary: is a list of span fields to include when logging errors happen during the ingestion of events.
        description: >
          For example, the span too large error. This is primarily useful in
          trying to track down misbehaving senders in a large installation. The
          fields `dataset`, `apihost`, and `environment` are always included.
          If a field is not present in the span, then it will not be present in
          the error log.

      - name: DryRun
        type: bool
        valuetype: showexample
        default: false
        example: true
        reload: true
        summary: controls whether sampling is applied to incoming traces.
        description: >
          If enabled, then Refinery marks the traces that would be dropped
          given the current sampling rules, and sends all traces regardless of
          the sampling decision. This is useful for evaluating sampling rules.

          When DryRun is enabled, traces is decorated with `meta.refinery.
          dryrun.kept` that is set to `true` or `false`, based on whether the
          trace would be kept or dropped. In addition, `SampleRate` will be set
          to the incoming rate for all traces, and the field
          `meta.refinery.dryrun.sample_rate` will be set to the sample rate
          that would have been used.

  - name: Logger
    title: "Refinery Logger"
    description: contains configuration for logging.
    fields:
      - name: Type
        type: string
        valuetype: choice
        choices: ["stdout", "honeycomb", "none"]
        default: "stdout"
        reload: false
        validations:
          - type: choice
        summary: is the type of logger to use.
        description: >
          The setting specifies where (and if) Refinery sends logs.

          `none` means that logs are discarded.

          `honeycomb` means that logs will be forwarded to Honeycomb as events
          according to the set Logging settings.

          `stdout` means that logs will be written to `stdout`.

      - name: Level
        type: string
        valuetype: choice
        choices: ["debug", "info", "warn", "error", "panic"]
        default: "warn"
        reload: false
        validations:
          - type: choice
        summary: is the logging level above which Refinery should send a log to the logger.
        description: >
          `warn` is the recommended level for production.

          `debug` is very verbose, and should not be used in production
          environments.

  - name: HoneycombLogger
    title: "Honeycomb Logger"
    description: contains configuration for logging to Honeycomb. Only used if `Logger.Type` is "honeycomb".
    fields:
      - name: APIHost
        v1group: HoneycombLogger
        v1name: LoggerHoneycombAPI
        type: url
        valuetype: nondefault
        default: "https://api.honeycomb.io"
        reload: false
        summary: is the URL of the Honeycomb API where Refinery sends its logs.
        description: >
          Refinery's internal logs will be sent to this host using the standard
          Honeycomb Events API.

      - name: APIKey
        v1group: HoneycombLogger
        v1name: LoggerAPIKey
        type: string
        pattern: apikey
        valuetype: nonemptystring
        default: ""
        example: "SetThisToAHoneycombKey"
        reload: false
        envvar: REFINERY_HONEYCOMB_LOGGER_API_KEY, REFINERY_HONEYCOMB_API_KEY
        commandline: logger-api-key
        validations:
          - type: format
            arg: apikey
        summary: is the API key used to send Refinery's logs to Honeycomb.
        description: >
          It is recommended that you create a separate team and key for
          Refinery telemetry.

      - name: Dataset
        v1group: HoneycombLogger
        v1name: LoggerDataset
        type: string
        valuetype: nonemptystring
        default: "Refinery Logs"
        reload: false
        validations:
          - type: notempty
        summary: is the dataset to which logs will be sent.
        description: >
          Only used if `APIKey` is specified.

      - name: SamplerEnabled
        v1group: HoneycombLogger
        v1name: LoggerSamplerEnabled
        type: defaulttrue
        valuetype: nondefault
        default: true
        reload: false
        summary: controls whether logs are sampled before sending to Honeycomb.
        description: >
          The sample rate is controlled by the `SamplerThroughput` setting. The sampler
          used throttles the rate of logs sent to Honeycomb from any given source within
          Refinery -- it should effectively limit the rate of redundant messages.

      - name: SamplerThroughput
        valuetype: showexample
        type: float
        default: 10
        example: 10
        reload: false
        summary: is the sampling throughput for logs in events per second.
        description: >
          The sampling algorithm attempts to make sure that the average
          throughput approximates this value, while also ensuring that all
          unique logs arrive at Honeycomb at least once per sampling
          period.

  - name: StdoutLogger
    title: "Stdout Logger"
    description: contains configuration for logging to `stdout`. Only used if `Logger.Type` is "stdout".
    fields:
      - name: Structured
        type: bool
        valuetype: nondefault
        default: false
        reload: false
        summary: controls whether to use structured logging.
        description: >
          `true` generates structured logs (JSON).
          `false` generates plain text logs.

      - name: SamplerEnabled
        type: bool
        valuetype: nondefault
        default: false
        reload: false
        firstversion: v2.2
        summary: controls whether logs are sampled before sending to `stdout`.
        description: >
          The sample rate is controlled by the `SamplerThroughput` setting.

      - name: SamplerThroughput
        valuetype: showexample
        type: float
        default: 10
        example: 10
        reload: false
        firstversion: v2.2
        summary: is the sampling throughput for logs in events per second.
        description: >
          The sampling algorithm attempts to make sure that the average
          throughput approximates this value, while also ensuring that all
          unique logs arrive at `stdout` at least once per sampling
          period.

  - name: PrometheusMetrics
    title: "Prometheus Metrics"
    description: contains configuration for Refinery's internally-generated metrics as made available through Prometheus.
    fields:
      - name: Enabled
        type: bool
        valuetype: conditional
        extra: "eq Metrics prometheus"
        default: false
        reload: false
        summary: controls whether to expose Refinery metrics over the `PrometheusListenAddr` port.
        description: >
          Each of the metrics providers can be enabled or disabled
          independently. Metrics can be sent to multiple destinations.

      - name: ListenAddr
        v1group: PrometheusMetrics
        v1name: MetricsListenAddr
        type: hostport
        valuetype: nondefault
        default: "localhost:2112"
        reload: false
        summary: is the IP and port the Prometheus Metrics server will run on.
        description: >
          Determines the interface and port on which Prometheus will listen for
          requests for `/metrics`. Must be different from the main Refinery
          listener. Only used if `Enabled` is `true` in `PrometheusMetrics`.

  - name: LegacyMetrics
    title: "Legacy Metrics"
    description: >
      contains configuration for Refinery's legacy metrics.
      Version 1.x of Refinery used this format for sending Metrics to
      Honeycomb. The metrics generated that way are nonstandard and will be
      deprecated in a future release. New installations should prefer
      `OTelMetrics`.
    fields:
      - name: Enabled
        type: bool
        valuetype: conditional
        extra: "eq Metrics honeycomb"
        default: false
        reload: false
        summary: controls whether to send legacy-formatted metrics to Honeycomb.
        description: >
          Each of the metrics providers can be enabled or disabled
          independently. Metrics can be sent to multiple destinations.

      - name: APIHost
        v1group: HoneycombMetrics
        v1name: MetricsHoneycombAPI
        type: url
        valuetype: nondefault
        default: "https://api.honeycomb.io"
        reload: false
        summary: is the URL of the Honeycomb API where legacy metrics are sent.
        description: >
          Refinery's internal metrics will be sent to this host using the
          standard Honeycomb Events API.

      - name: APIKey
        v1group: HoneycombMetrics
        v1name: MetricsAPIKey
        type: string
        pattern: apikey
        valuetype: nondefault
        default: ""
        example: "SetThisToAHoneycombKey"
        reload: false
        validations:
          - type: format
            arg: apikey
        envvar: REFINERY_HONEYCOMB_METRICS_API_KEY, HONEYCOMB_API_KEY
        commandline: legacy-metrics-api-key
        summary: is the API key used by Refinery to send its metrics to Honeycomb.
        description: >
          It is recommended that you create a separate team and key for
          Refinery telemetry.

      - name: Dataset
        v1group: HoneycombMetrics
        v1name: MetricsDataset
        type: string
        valuetype: nondefault
        default: "Refinery Metrics"
        reload: false
        validations:
          - type: notempty
        summary: is the Honeycomb dataset where Refinery sends its metrics.
        description: >
          Only used if `APIKey` is specified.

      - name: ReportingInterval
        v1group: HoneycombMetrics
        v1name: MetricsReportingInterval
        type: duration
        valuetype: secondstoduration
        default: 30s
        reload: false
        summary: is the interval between sending legacy metrics to Honeycomb.
        description: >
          Between 1 and 60 seconds is typical.

  - name: OTelMetrics
    title: "OpenTelemetry Metrics"
    description: >
      contains configuration for Refinery's OpenTelemetry (OTel)
      metrics. This is the preferred way to send metrics to Honeycomb. New
      installations should prefer `OTelMetrics`.
    fields:
      - name: Enabled
        type: bool
        valuetype: nondefault
        default: false
        reload: false
        firstversion: v2.0
        summary: controls whether to send metrics via OpenTelemetry.
        description: >
          Each of the metrics providers can be enabled or disabled
          independently. Metrics can be sent to multiple destinations.

      - name: APIHost
        type: url
        valuetype: nondefault
        default: "https://api.honeycomb.io"
        reload: false
        firstversion: v2.0
        summary: is the URL of the OpenTelemetry API to which metrics will be sent.
        description: >
          Refinery's internal metrics will be sent to the `/v1/metrics`
          endpoint on this host.

      - name: APIKey
        type: string
        pattern: apikey
        valuetype: nondefault
        default: ""
        example: "SetThisToAHoneycombKey"
        reload: false
        validations:
          - type: format
            arg: apikey
        envvar: REFINERY_OTEL_METRICS_API_KEY, HONEYCOMB_API_KEY
        commandline: otel-metrics-api-key
        firstversion: v2.0
        summary: is the API key used to send Honeycomb metrics via OpenTelemetry.
        description: >
          It is recommended that you create a separate team and key for
          Refinery telemetry.

          If this is blank, then Refinery will not set the Honeycomb-specific
          headers for OpenTelemetry, and your `APIHost` must be set to a
          valid OpenTelemetry endpoint.

      - name: Dataset
        type: string
        valuetype: nondefault
        default: "Refinery Metrics"
        reload: false
        validations:
          - type: notempty
        firstversion: v2.0
        summary: is the Honeycomb dataset to which Refinery sends its OpenTelemetry metrics.
        description: >
          Only used if `APIKey` is specified.

      - name: ReportingInterval
        type: duration
        valuetype: secondstoduration
        default: 30s
        reload: false
        firstversion: v2.0
        summary: is the interval between sending OpenTelemetry metrics to Honeycomb.
        description: >
          Between `1` and `60` seconds is typical.

      - name: Compression
        type: string
        valuetype: choice
        choices: ["none", "gzip"]
        default: "gzip"
        reload: false
        firstversion: v2.0
        summary: is the compression algorithm to use when sending OpenTelemetry metrics to Honeycomb.
        description: >
          `gzip` is the default and recommended value. In rare circumstances,
          compression costs may outweigh the benefits, in which case `none`
          may be used.

  - name: OTelTracing
    title: "OpenTelemetry Tracing"
    description: contains configuration for Refinery's own tracing. This is
      generally not expected to be used by end users, but is useful for
      debugging Refinery itself. In rare cases, it may be useful for debugging
      user configurations; please consult with Honeycomb support before using
      this feature.
    fields:
      - name: Type
        type: string
        valuetype: choice
        choices: ["otel", "none"]
        default: "none"
        reload: false
        validations:
          - type: choice
        summary: is the type of tracing to use for Refinery's own traces.
        description: >
          The setting specifies how (and if) Refinery sends traces.

          `none` means that traces are discarded.

          `otel` means that OpenTelemetry traces will be generated according
          to the settings in this section.

      - name: APIHost
        type: url
        valuetype: nondefault
        default: "https://api.honeycomb.io"
        reload: false
        firstversion: v2.6
        summary: is the URL of the OpenTelemetry API to which traces will be sent.
        description: >
          Refinery's internal traces will be sent to the `/v1/traces`
          endpoint on this host.

      - name: APIKey
        type: string
        pattern: apikey
        valuetype: nondefault
        default: ""
        example: "SetThisToAHoneycombKey"
        reload: false
        firstversion: v2.6
        envvar: REFINERY_HONEYCOMB_TRACES_API_KEY, REFINERY_HONEYCOMB_API_KEY
        commandline: otel-traces-api-key
        validations:
          - type: format
            arg: apikey
        summary: is the API key used to send Refinery's traces to Honeycomb.
        description: >
          It is recommended that you create a separate team and key for
          Refinery telemetry.

          If this is blank, then Refinery will not set the Honeycomb-specific
          headers for OpenTelemetry, and your `APIHost` must be set to a
          valid OpenTelemetry endpoint.

      - name: Dataset
        type: string
        valuetype: nondefault
        default: "Refinery Traces"
        reload: false
        validations:
          - type: notempty
        firstversion: v2.0
        summary: is the Honeycomb dataset to which Refinery sends its OpenTelemetry metrics.
        description: >
          Only used if `APIKey` is specified.

      - name: SampleRate
        type: int
        valuetype: nondefault
        default: 100
        validations:
          - type: minimum
            arg: 1
        reload: true
        summary: is the rate at which Refinery samples its own traces.
        description: >
          This is the Honeycomb sample rate used to sample traces sent by Refinery. Since each
          incoming span generates multiple outgoing spans, a sample rate of at least 100 is
          strongly advised.

  - name: PeerManagement
    title: "Peer Management"
    description: controls how the Refinery cluster communicates between peers.
    fields:
      - name: Type
        v1group: PeerManagement
        v1name: Type
        type: string
        valuetype: choice
        choices: ["redis", "file"]
        default: "file"
        reload: false
        validations:
          - type: choice
        summary: is the type of peer management to use.
        description: >
          Peer management is the mechanism by which Refinery locates its peers.

          `file` means that Refinery gets its peer list from
          the Peers list in this config file.

          `redis` means that Refinery self-registers with a Redis instance and
          gets its peer list from there.

      - name: Identifier
        v1group: PeerManagement
        v1name: RedisIdentifier
        type: string
        valuetype: nonemptystring
        example: "192.168.1.1"
        reload: false
        summary: specifies the identifier to use when registering itself with peers.
        description: >
          By default, when using a peer registry, Refinery will use the local
          hostname to identify itself to other peers. If your environment
          requires something else, (for example, if peers cannot resolve each
          other by name), then you can specify the exact identifier, such as an
          IP address, to use here. Overrides `IdentifierInterfaceName`, if both
          are set.

      - name: IdentifierInterfaceName
        v1group: PeerManagement
        v1name: IdentifierInterfaceName
        type: string
        valuetype: nonemptystring
        example: "eth0"
        reload: false
        summary: specifies a network interface to use when finding a local hostname.
        description: >
          By default, when using a peer registry, Refinery will use the local
          hostname to identify itself to other peers. If your environment
          requires that you use IPs as identifiers (for example, if peers
          cannot resolve each other by name), then you can specify the network
          interface that Refinery is listening on here. Refinery will use the
          first unicast address that it finds on the specified network
          interface as its identifier.

      - name: UseIPV6Identifier
        v1group: PeerManagement
        v1name: UseIPV6Identifier
        type: bool
        valuetype: nondefault
        default: false
        reload: false
        summary: specifies that Refinery should use an IPV6 address as its identifier.
        description: >
          If using `IdentifierInterfaceName`, Refinery will default to the first
          IPv4 unicast address it finds for the specified interface. If this
          value is specified, then Refinery will use the first IPV6 unicast
          address found.

      - name: Peers
        v1group: PeerManagement
        v1name: Peers
        type: stringarray
        valuetype: stringarray
        example: "http://192.168.1.11:8081,http://192.168.1.12:8081"
        reload: false
        validations:
          - type: elementType
            arg: url
        summary: is the list of peers to use when Type is "file", excluding self.
        description: >
          This list is ignored when Type is "redis". The format is a list of
          strings of the form "scheme://host:port".

  - name: RedisPeerManagement
    title: "Redis Peer Management"
    description: >
      controls how the Refinery cluster communicates
      between peers when using Redis. Only applies when `PeerManagement.Type`
      is "redis".

    fields:
      - name: Host
        v1group: PeerManagement
        v1name: RedisHost
        type: hostport
        valuetype: nonemptystring
        example: "localhost:6379"
        reload: false
        envvar: REFINERY_REDIS_HOST
        commandline: redis-host
        summary: is the host and port of the Redis instance to use for peer cluster membership management.
        description: >
          Must be in the form `host:port`.

      - name: Username
        v1group: PeerManagement
        v1name: RedisUsername
        type: string
        default: ""
        valuetype: nonemptystring
        reload: false
        envvar: REFINERY_REDIS_USERNAME
        commandline: redis-username
        summary: is the username used to connect to Redis for peer cluster membership management.
        description: >
          Many Redis installations do not use this field.

      - name: Password
        v1group: PeerManagement
        v1name: Password
        type: string
        default: ""
        valuetype: nonemptystring
        reload: false
        envvar: REFINERY_REDIS_PASSWORD
        commandline: redis-password
        summary: is the password used to connect to Redis for peer cluster membership management.
        description: >
          Many Redis installations do not use this field.

      - name: AuthCode
        v1group: PeerManagement
        v1name: AuthCode
        type: string
        default: ""
        valuetype: nonemptystring
        reload: false
        firstversion: v2.2
        envvar: REFINERY_REDIS_AUTH_CODE
        commandline: redis-auth-code
        summary: is the string used to connect to Redis for peer cluster membership management using an explicit AUTH command.
        description: >
          Many Redis installations do not use this field.

      - name: Prefix
        v1group: PeerManagement
        v1name: Prefix
        type: string
        valuetype: nondefault
        default: "refinery"
        example: "customPrefix"
        reload: false
        validations:
          - type: notempty
        summary: is a string used as a prefix for the keys in Redis while
          storing the peer membership.
        description: >
          It might be useful to override this in any situation where multiple
          Refinery clusters or multiple applications want to share a single
          Redis instance. It may not be blank.

      - name: Database
        v1group: PeerManagement
        v1name: Database
        type: int
        valuetype: nondefault
        default: 0
        example: 1
        reload: false
        validations:
          - type: minimum
            arg: 0
          - type: maximum
            arg: 15
        summary: is the database number to use for the Redis instance storing the peer membership.
        description: >
          An integer from 0-15 indicating the database number to use for the
          Redis instance storing the peer membership. It might be useful to set
          this in any situation where multiple Refinery clusters or multiple
          applications want to share a single Redis instance.

      - name: UseTLS
        v1group: PeerManagement
        v1name: UseTLS
        type: bool
        valuetype: nondefault
        default: false
        reload: false
        summary: enables TLS when connecting to Redis for peer cluster membership management.
        description: >
          When enabled, this setting sets the `MinVersion` in the TLS
          configuration to `1.2`.

      - name: UseTLSInsecure
        v1group: PeerManagement
        v1name: UseTLSInsecure
        type: bool
        valuetype: nondefault
        default: false
        reload: false
        summary: disables certificate checks when connecting to Redis for peer cluster membership management.
        description: >
          This setting is intended for use with self-signed certificates and
          sets the `InsecureSkipVerify` flag within Redis.

      - name: Timeout
        v1group: PeerManagement
        v1name: Timeout
        type: duration
        valuetype: nondefault
        default: 5s
        reload: false
        summary: is the timeout to use when communicating with Redis.
        description: >
          It is rarely necessary to adjust this value.

      - name: MaxIdle
        firstversion: v2.6
        type: int
        valuetype: nondefault
        default: 20
        reload: false
        validations:
          - type: minimum
            arg: 0
        summary: is the maximum number of idle connections in the Redis connection pool.
        description: >
          This setting is used to control the number of idle connections to
          Redis. It is rarely necessary to adjust this value.

      - name: MaxActive
        firstversion: v2.6
        type: int
        valuetype: nondefault
        default: 20
        validations:
          - type: minimum
            arg: 10
        reload: false
        summary: is the maximum number of active connections in the Redis connection pool.
        description: >
          This setting is used to control the maximum number of active
          connections to Redis in the Redis connection pool. It may be useful to
          increase this value in high-throughput environments.

      - name: Parallelism
        firstversion: v3.0
        type: int
        valuetype: nondefault
        default: 10
        reload: true
        validations:
          - type: minimum
            arg: 3
        summary: is the number of parallel Redis connections to use when communicating with Redis for trace decisions.
        description: >
          This setting is used to control the number of parallel Redis
          connections use when communicating trace information to Redis. It may
          be useful to increase this value in high-throughput environments.

      - name: MetricsCycleRate
        firstversion: v3.0
        type: duration
        valuetype: nondefault
        default: 1m
        reload: true
        summary: is the interval between retrieving metrics from Redis server.
        description: >
          This setting is used to control the interval between retrieving
          metrics from Redis server. It may be useful to increase this value in
          high-throughput environments. By setting this value to 0, the metrics
          retrieval will be disabled.


      - name: Strategy
        v1group: PeerManagement
        v1name: Strategy
        type: string
        valuetype: choice
        choices: ["legacy", "hash"]
        default: "hash"
        validations:
          - type: choice
        lastversion: v1.21
        reload: false
        summary: controls the way that traces are assigned to Refinery nodes.
        description: >
          The `hash` strategy is strongly recommended, as only 1/N traces
          (where N is the number of nodes) are disrupted when the node count
          changes.

          The `legacy` strategy uses a simple algorithm that unfortunately
          causes 1/2 of the in-flight traces to be assigned to a different node
          whenever the number of nodes changes. The legacy strategy is
          **deprecated** and is intended to be removed in a future release.

          In v2.0, the `legacy` strategy will be removed along with this
          setting.

  - name: Collection
    title: "Collection Settings"
    description: >
      contains the settings that are relevant to collecting spans
      together to make traces. If none of the memory settings are used, then
      Refinery will not attempt to limit its memory usage. This is not
      recommended for production use since a burst of traffic could cause
      Refinery to run out of memory and crash.
    fields:
      - name: CacheCapacity
        v1group: InMemCollector
        v1name: CacheCapacity
        type: int
        valuetype: nondefault
        default: 10_000
        reload: true
        validations:
          - type: minimum
            arg: 1000
        summary: is the number of traces to keep in the cache's circular buffer.
        description: >
          The collection cache is used to collect all spans into a trace as
          well as remember the sampling decision for any spans that might come
          in after the trace has been marked "complete" (either by timing out
          or seeing the root span). The number of traces in the cache should be
          many multiples (100x to 1000x) of the total number of concurrently
          active traces (trace throughput * trace duration).

      - name: PeerQueueSize
        type: int
        default: 30_000
        valuetype: nondefault
        reload: false
        firstversion: v2.2
        lastversion: v2.5
        summary: is the maximum number of in-flight spans redirected from other peers stored in the peer span queue.
        description: >
          The peer span queue serves as a buffer for spans redirected from other peers before they are processed.
          In the event that this queue reaches its capacity, any subsequent spans will be discarded. The size of this
          queue is contingent upon the number of peers within the cluster. Specifically, with N peers, the queue's span
          capacity is determined by (N-1)/N of the total number of spans.
          Its minimum value should be at least three times the `CacheCapacity`.

      - name: IncomingQueueSize
        type: int
        default: 30_000
        valuetype: nondefault
        reload: false
        firstversion: v2.2
        summary: is the number of in-flight spans to keep in the incoming span queue.
        description: >
          The incoming span queue is used to buffer spans before they are processed.
          If this queue fills up, then subsequent spans will be dropped.
          Its minimum value should be at least three times the `CacheCapacity`.

      - name: AvailableMemory
        type: memorysize
        valuetype: memorysize
        example: "4.5Gb"
        reload: true
        envvar: REFINERY_AVAILABLE_MEMORY
        commandLine: available-memory
        summary: is the amount of system memory available to the Refinery process.
        description: >
          This value will typically be set through an environment variable
          controlled by the container or deploy script. If this value is zero or
          not set, then `MaxMemoryPercentage` cannot be used to calculate the
          maximum allocation and `MaxAlloc` will be used instead. If set, then
          this must be a memory size. Sizes with standard unit suffixes (such as
          `MB` and `GiB`) and Kubernetes units (such as `M` and `Gi`) are
          supported. Fractional values with a suffix are supported. If
          `AvailableMemory` is set, `Collections.MaxAlloc` must not be defined.

      - name: MaxMemoryPercentage
        type: percentage
        valuetype: showexample
        default: 75
        example: 75
        reload: true
        validations:
          - type: minimum
            arg: 10
          - type: requiredWith
            arg: AvailableMemory
        summary: is the maximum percentage of memory that should be allocated by the span collector.
        description: >
          If nonzero, then it must be an integer value between 1 and 100,
          representing the target maximum percentage of memory that should be
          allocated by the span collector. If set to a non-zero value, then
          once per tick (see `SendTicker`) the collector will compare total
          allocated bytes to this calculated value. If allocation is too high,
          then traces will be ejected from the cache early to reduce memory.
          Useful values for this setting are generally in the range of 70-90.

      - name: MaxAlloc
        v1group: InMemCollector
        v1name: MaxAlloc
        type: memorysize
        valuetype: memorysize
        default: 0
        reload: true
        validatons:
          - type: conflictsWith
            arg: AvailableMemory
        summary: is the maximum number of bytes that should be allocated by the Collector.
        description: >
          If set, then this must be a memory size. Sizes with standard unit
          suffixes (such as `MB` and `GiB`) and Kubernetes units (such as `M`
          and `Gi`) are supported. Fractional values with a suffix are
          supported. See `MaxMemoryPercentage` for more details. If set,
          `Collections.AvailableMemory` must not be defined.

      - name: DeciderCycleDuration
        type: duration
        valuetype: nondefault
        default: 100ms
        reload: false
        summary: is the cycle time used for processing batches of traces.
        description: >
          This setting controls the duration that Refinery uses for processing
          trace batches. It is rarely necessary to adjust this value.

      - name: DeciderBatchSize
        type: int
        valuetype: nondefault
        default: 1000
        reload: true
        summary: is the maximum number of traces retrieved by the decision processor in a single request.
        description: >
          This setting controls the number of traces that are requested from the
          central store when Refinery is making trace decisions. Refinery's
          trace throughput is limited by
          `DeciderBatchSize*DeciderCycleDuration`, which is the maximum number
          of trace decisions Refinery can make in one second. It is rarely
          necessary to adjust this value.

      - name: SenderCycleDuration
        type: duration
        valuetype: nondefault
        default: 100ms
        reload: false
        summary: is the duration to pause between sending trace batches.
        description: >
          This setting controls the duration that Refinery waits between
          sending trace batches. It is rarely necessary to adjust this value.

      - name: SenderBatchSize
        type: int
        valuetype: nondefault
        default: 1000
        reload: false
        summary: is the number of traces evaluated for sending in a single request.
        description: >
          This setting controls the number of trace IDs processed when refinery
          is considering which spans to send or drop. Refinery's trace
          throughput is limited by
          `SenderBatchSize*SenderCycleDuration`, which is the
          maximum number of traces that can be processed in one second. It is
          rarely necessary to adjust this value.

      - name: TraceFetcherConcurrency
        type: int
        valuetype: nondefault
        default: 10
        reload: true
        summary: is the maximum concurrency to use when fetching traces from the central store.
        description: >
          This setting controls the number of concurrent trace fetchers that
          Refinery will use when fetching traces from the central store to make
          trace decisions. It is rarely necessary to adjust this value.

      - name: ShutdownDelay
        type: duration
        valuetype: nondefault
        default: 30s
        reload: true
        summary: controls the maximum time Refinery can use while draining traces at shutdown.
        description: >
          This setting controls the duration that Refinery expects to have to
          drain in-process traces before shutting down an instance. When asked
          to shut down gracefully, Refinery stops accepting new spans
          immediately and uses half of this duration to allow traces to drain
          naturally. After that time, it actively drains the remaining traces by
          sending them to Redis. This value should be set to a bit less than the
          normal timeout period for shutting down without forcibly terminating
          the process.

      - name: MemoryCycleDuration
        type: duration
        valuetype: nonzero
        default: 10s
        reload: false
        summary: is the cycle time between memory checks.
        description: >
          This setting controls the amount of time that Refinery waits between
          checking its memory usage. This is somewhat expensive, so it's best
          not to do it too often, but in situations where bursts of traffic can
          cause memory pressure, it can be useful to check more frequently.

  - name: BufferSizes
    title: "Buffer Sizes"
    description: >
      contains the settings that are relevant to
      the sizes of communications buffers.
    fields:
      - name: UpstreamBufferSize
        type: int
        valuetype: nondefault
        default: 10_000
        reload: true
        validations:
          - type: minimum
            arg: 1_000
        summary: is the size of the queue used to buffer spans to send to the upstream Collector.
        description: >
          The size of the buffer is measured in spans. If the buffer fills up,
          then performance will degrade because Refinery will block while
          waiting for space to become available. If this happens, then you
          should increase the buffer size.

      - name: PeerBufferSize
        type: int
        valuetype: nondefault
        default: 100_000
        reload: true
        validations:
          - type: minimum
            arg: 10_000
        summary: is the size of the queue used to buffer spans to send to peer nodes.
        description: >
          The size of the buffer is measured in spans. If the buffer fills up,
          then performance will degrade because Refinery will block while
          waiting for space to become available. If this happens, then you
          should increase this buffer size.

  - name: Specialized
    title: "Specialized Configuration"
    description: contains special-purpose configuration options that are not typically needed.
    fields:
      - name: EnvironmentCacheTTL
        type: duration
        valuetype: nondefault
        default: 1h
        reload: true
        validations:
          - type: minimum
            arg: 15m
        summary: is the duration for which environment information is cached.
        description: >
          This is the amount of time for which Refinery caches environment
          information, which it looks up from Honeycomb for each different
          `APIKey`. This information is used when making sampling decisions. If
          you have a very large number of environments, then you may want to
          increase this value.

      - name: CompressPeerCommunication
        type: defaulttrue
        default: true
        valuetype: nondefault
        reload: false
        summary: determines whether Refinery will compress span data it forwards to peers.
        description: >
          If it costs money to transmit data between Refinery instances (for
          example, when spread across AWS availability zones), then you almost
          certainly want compression enabled to reduce your bill. The option to
          disable it is provided as an escape hatch for deployments that value
          lower CPU utilization over data transfer costs.

      - name: Collector
        type: string
        v1name: Collector
        valuetype: choice
        choices: ["InMemCollector"]
        default: "InMemCollector"
        lastversion: v1.21
        reload: false
        summary: is the collector to use for collecting traces.
        description: >
          Currently, the only supported value is `InMemCollector`.

      - name: CacheOverrunStrategy
        type: string
        v1group: InMemCollector
        v1name: CacheOverrunStrategy
        valuetype: choice
        choices: ["resize", "impact"]
        default: "resize"
        reload: true
        lastversion: v1.21
        summary: controls how the cache is managed when memory pressure is high.
        description: >
          `resize` means that when a cache overrun occurs, the cache is shrunk
          and never grows again, which is generally not helpful unless it
          occurs because of a permanent change in traffic patterns.

          In the `impact` strategy, the items having the most impact on the
          cache size are ejected from the cache earlier than normal but the
          cache is not resized.

          In all cases, it only applies if `MaxAlloc` is nonzero. Default is
          `resize` for compatibility but `impact` is recommended for most
          installations.

          In v2.0, the only available strategy is `impact`, and this setting
          will be removed.

      - name: AdditionalAttributes
        type: map
        valuetype: map
        example: "ClusterName:MyCluster,environment:production"
        reload: true
        validations:
          - type: elementType
            arg: string
        summary: is a map that can be used for injecting user-defined attributes into every span.
        description: >
          For example, it could be used for naming a Refinery cluster. Both
          keys and values must be strings.

  - name: IDFields
    title: "ID Fields"
    description: >
      controls the field names to use for the event ID fields. These
      fields are used to identify events that are part of the same trace.
    fields:
      - name: TraceNames
        type: stringarray
        valuetype: stringarray
        example: "trace.trace_id,traceId"
        reload: true
        validations:
          - type: elementType
            arg: string
        summary: is the list of field names to use for the trace ID.
        description: >
          The first field in the list that is present in an incoming span will
          be used as the trace ID. If none of the fields are present, then
          Refinery treats the span as not being part of a trace and forwards it
          immediately to Honeycomb.

      - name: ParentNames
        type: stringarray
        valuetype: stringarray
        example: "trace.parent_id,parentId"
        reload: true
        validations:
          - type: elementType
            arg: string
        summary: is the list of field names to use for the parent ID.
        description: >
          The first field in the list that is present in an event will be used
          as the parent ID. A trace without a `parent_id` is assumed to be a
          root span.

      - name: SpanNames
        type: stringarray
        valuetype: stringarray
        example: "trace.span_id,spanId"
        reload: true
        validations:
          - type: elementType
            arg: string
        summary: is the list of field names to use for the span ID.
        description: >
          The first field in the list that is present in an event will be used
          as the span ID.

  - name: GRPCServerParameters
    title: "gRPC Server Parameters"
    description: >
      controls the parameters of the gRPC server used to
      receive OpenTelemetry data in gRPC format.
    fields:
      - name: Enabled
        type: defaulttrue
        valuetype: conditional
        extra: "nonempty GRPCListenAddr"
        default: true
        reload: false
        summary: specifies whether the gRPC server is enabled.
        description: >
          If `false`, then the gRPC server is not started and no gRPC traffic
          is accepted.

      - name: ListenAddr
        v1name: GRPCListenAddr
        type: hostport
        valuetype: nondefault
        default: ""
        reload: false
        envvar: REFINERY_GRPC_LISTEN_ADDRESS
        commandLine: grpc-listen-address
        summary: is the address Refinery listens to for incoming GRPC OpenTelemetry events.
        description: >
          Incoming traffic is expected to be unencrypted, so if using SSL, then
          put something like `nginx` in front to do the decryption.

      - name: MaxConnectionIdle
        v1group: GRPCServerParameters
        v1name: MaxConnectionIdle
        type: duration
        valuetype: nondefault
        default: 1m
        example: 1m
        reload: false
        validations:
          - type: minOrZero
            arg: 1s
        summary: is the amount of time to permit an idle connection.
        description: >
          A duration for the amount of time after which an idle connection will
          be closed by sending a GoAway. "Idle" means that there are no active
          RPCs. "0s" sets duration to infinity, but this is not recommended for
          Refinery deployments behind a load balancer, because it will prevent
          the load balancer from distributing load evenly among peers.

      - name: MaxConnectionAge
        v1group: GRPCServerParameters
        v1name: MaxConnectionAge
        type: duration
        valuetype: nondefault
        default: 3m
        reload: false
        validations:
          - type: minOrZero
            arg: 10s
        summary: is the maximum amount of time a gRPC connection may exist.
        description: >
          After this duration, the gRPC connection is closed by sending a
          `GoAway`. A random jitter of +/-10% will be added to
          `MaxConnectionAge` to spread out connection storms.

          `0s` sets duration to infinity; a value measured in low minutes will
          help load balancers to distribute load among peers more evenly.

      - name: MaxConnectionAgeGrace
        v1group: GRPCServerParameters
        v1name: MaxConnectionAgeGrace
        type: duration
        valuetype: nondefault
        default: 1m
        reload: false
        summary: is the duration beyond `MaxConnectionAge` after which the connection will be forcibly closed.
        description: >
          This setting is in case the upstream node ignores the `GoAway`
          request. "0s" sets duration to infinity.

      - name: KeepAlive
        v1group: GRPCServerParameters
        v1name: Time
        type: duration
        valuetype: nondefault
        default: 1m
        reload: false
        validations:
          - type: minOrZero
            arg: 1s
        summary: is the duration between keep-alive pings.
        description: >
          After this amount of time, if the client does not see any activity,
          then it pings the server to see if the transport is still alive. "0s"
          sets duration to 2 hours.

      - name: KeepAliveTimeout
        v1group: GRPCServerParameters
        v1name: Timeout
        type: duration
        valuetype: nondefault
        default: 20s
        reload: false
        validations:
          - type: minOrZero
            arg: 1s
        summary: is the duration the server waits for activity on the connection.
        description: >
          This is the amount of time after which if the server does not see any
          activity, then it pings the client to see if the transport is still
          alive. "0s" sets duration to 20 seconds.

      - name: MaxSendMsgSize
        type: memorysize
        valuetype: memorysize
        default: 5MB
        reload: false
        firstversion: v2.2
        validations:
          - type: minimum
            arg: 1MB
          - type: maximum
            arg: 1GiB
        summary: is the maximum message size the server can send.
        description: >
          The server enforces a maximum message size to avoid exhausting the
          memory available to the process by a single request. The size is
          expressed in bytes.

      - name: MaxRecvMsgSize
        type: memorysize
        valuetype: memorysize
        default: 5MB
        reload: false
        firstversion: v2.2
        validations:
          - type: minimum
            arg: 1MB
          - type: maximum
            arg: 1GiB
        summary: is the maximum message size the server can receive.
        description: >
          The server enforces a maximum message size to avoid exhausting the
          memory available to the process by a single request. The size is
          expressed in bytes.

  - name: SampleCache
    title: "Sample Cache"
    description: >
      controls the sample cache used to retain information about trace status after the sampling decision has been made.
    fields:
      - name: Type
        # we had a bug in the v1 config where this was implemented as `SampleCache` but documented as `SampleCacheConfig`;
        # we need to allow both names to be safe
        v1group: SampleCacheConfig/SampleCache
        v1name: Type
        type: string
        valuetype: nondefault
        default: "cuckoo"
        reload: false
        lastversion: v1.21
        summary: is the type of sample cache.
        description: >
          "cuckoo" is a strategy where dropped traces are preserved in a "Cuckoo
          Filter", which can remember a much larger number of dropped traces,
          leaving capacity to retain a much larger number of kept traces. It is
          also more configurable. The "cuckoo" filter is recommended for most
          installations and is the only option available in Refinery 2.0 and
          later.

          "legacy" is a strategy where both keep and drop decisions are stored
          in a circular buffer that is 5x the size of the trace cache. This is
          Refinery's original sample cache strategy.

      - name: KeptSize
        v1group: SampleCacheConfig/SampleCache
        v1name: KeptSize
        type: int
        valuetype: nondefault
        default: 10_000
        reload: true
        summary: is the number of traces preserved in the cuckoo kept traces cache.
        description: >
          Refinery keeps a record of each trace that was kept and sent to
          Honeycomb, along with some statistical information. This is most
          useful in cases where the trace was sent before sending the root
          span, so that the root span can be decorated with accurate metadata.
          Default is `10_000` traces. Each trace in this cache consumes roughly
          200 bytes.

      - name: DroppedSize
        v1group: SampleCacheConfig/SampleCache
        v1name: DroppedSize
        type: int
        valuetype: nondefault
        default: 1_000_000
        reload: true
        summary: is the size of the cuckoo dropped traces cache.
        description: >
          This cache consumes 4-6 bytes per trace at a scale of millions of
          traces.
          Changing its size with live reload sets a future limit, but does not
          have an immediate effect.

      - name: SizeCheckInterval
        v1group: SampleCacheConfig/SampleCache
        v1name: SizeCheckInterval
        type: duration
        valuetype: nondefault
        default: 10s
        reload: true
        validations:
          - type: minimum
            arg: 1s
        summary: controls how often the cuckoo cache re-evaluates its remaining capacity.
        description: >
          This cache is quite resilient so it does not need to happen very
          often, but the operation is also inexpensive.
          Default is 10 seconds.

  - name: StressRelief
    title: "Stress Relief"
    description: >
      controls the Stress Relief mechanism, which is used to
      prevent Refinery from being overwhelmed by a large number of traces.

      There is a metric called `stress_level` that is emitted as part of
      Refinery metrics. It is a measure of Refinery's throughput rate relative
      to its processing rate, combined with the amount of room in its internal
      queues, and ranges from `0` to `100`. `stress_level` is generally
      expected to be `0` except under heavy load. When stress levels reach
      `100`, there is an increased chance that Refinery will become unstable.

      To avoid this problem, the Stress Relief system can do deterministic
      sampling on new trace traffic based solely on `TraceID`, without having
      to store traces in the cache or take the time processing sampling rules.
      Existing traces in flight will be processed normally, but when Stress
      Relief is active, trace decisions are made deterministically on a
      per-span basis; all spans will be sampled according to the `SamplingRate`
      specified here.

      Once Stress Relief activates (by exceeding the `ActivationLevel`), it
      will not deactivate until `stress_level` falls below the
      `DeactivationLevel`. When it deactivates, normal trace decisions are made
      -- and any additional spans that arrive for traces that were active
      during Stress Relief will respect the decisions made during that time.

      The measurement of stress is a lagging indicator and is highly dependent
      on Refinery configuration and scaling. Other configuration values should
      be well tuned first, before adjusting the Stress Relief Activation
      parameters.

      Stress Relief is not a substitute for proper configuration and scaling,
      but it can be used as a safety valve to prevent Refinery from becoming
      unstable under heavy load.

    fields:
      - name: Mode
        v1group: StressRelief
        v1name: Mode
        type: string
        valuetype: nondefault
        default: "never"
        reload: true
        summary: is a string indicating how to use Stress Relief.
        description: >
          This setting sets the Stress Relief mode.

          "never" means that Stress Relief will never activate.

          "monitor" is the recommended setting, and means that
          Stress Relief will monitor the status of Refinery and activate
          according to the levels set by fields such as `ActivationLevel`.

          "always" means that Stress Relief is always on, which may be useful
          in an emergency situation.

      - name: ActivationLevel
        v1group: StressRelief
        v1name: ActivationLevel
        type: percentage
        valuetype: nondefault
        default: 90
        reload: true
        summary: is the `stress_level` (from 0-100) at which Stress Relief is triggered.
        description: >
          This value must be greater than `DeactivationLevel` and should be
          high enough that it is not reached in normal operation.

      - name: DeactivationLevel
        v1group: StressRelief
        v1name: DeactivationLevel
        type: percentage
        valuetype: nondefault
        default: 75
        reload: true
        summary: is the `stress_level` (from 0-100) at which Stress Relief is turned off.
        description: >
          This setting is subject to `MinimumActivationDuration`. The value
          must be less than `ActivationLevel`.

      - name: SamplingRate
        v1group: StressRelief
        v1name: StressSamplingRate
        type: int
        valuetype: nondefault
        default: 100
        reload: true
        summary: is the sampling rate to use when Stress Relief is activated.
        description: >
          All new traces will be deterministically sampled at this rate based
          only on the `traceID`. It should be chosen to be a rate that sends
          fewer samples than the average sampling rate Refinery is expected to
          generate.

          For example, if Refinery is configured to normally sample at a rate of
          1 in 10, then Stress Relief should be configured to sample at a rate
          of at least 1 in 30.

      - name: MinimumActivationDuration
        v1group: StressRelief
        v1name: MinimumActivationDuration
        type: duration
        valuetype: nondefault
        default: 10s
        reload: true
        summary: is the minimum time that Stress Relief will stay enabled once activated.
        description: >
          This setting helps to prevent oscillations.

      - name: MinimumStartupDuration
        v1group: StressRelief
        v1name: MinimumStartupDuration
        type: duration
        valuetype: nondefault
        default: 3s
        reload: true
        summary: is the minimum time that Stress Relief will stay enabled.
        description: >
          This setting is used when switching into Monitor mode.

          When Stress Relief is enabled, it will start up in stressed mode
          for at least this set duration of time to try to make sure that
          Refinery can handle the load before it begins processing it in
          earnest. This is to help address the problem of trying to bring a new
          node into an already-overloaded cluster.

          If this duration is `0`, then Refinery will not start in stressed
          mode, which will provide faster startup at the possible cost of
          startup instability.

  - name: CentralStore
    title: "Central Data Store"
    description: >
      controls the Central Data Store, which provides the storage system that
      Refinery uses to record and share trace data while traces are in flight.

    fields:
      - name: Type
        firstVersion: v2.6
        type: string
        valuetype: choice
        choices: ["local", "redis"]
        default: "local"
        reload: false
        summary: is the type of central store to use.
        description: >
          "local" means that refinery stores all trace data locally and
          is generally only used in a configuration with a single Refinery node.

          "redis" means that a Redis instance is used as the central store
          for a cluster of Refineries; the Central Store is the mechanism
          through which the refineries share trace data.

      - name: SpanChannelSize
        firstVersion: v2.6
        type: int
        valuetype: nondefault
        default: 100
        reload: true
        summary: is the size of the channel used to buffer spans to send to the central store.
        description: >
          The size of this buffer is measured in spans. If the buffer fills up,
          performance will degrade because Refinery will block while waiting for
          space to become available. If this happens and increasing this size
          only delays the problem, then you should consider whether the I/O
          bandwidth to the central store is sufficient.

      - name: WriteSpanBatchSize
        firstVersion: v3.0
        type: int
        valuetype: nondefault
        default: 20
        reload: true
        summary: is the maximum number of spans to be included for writing to basic store in a single request.
        description: >
          This setting controls the number of spans sent to the basic store at
          the same time when Refinery is processing incoming spans.

      - name: StateBatchSize
        firstVersion: v3.0
        type: int
        valuetype: nondefault
        default: 400
        reload: true
        summary: is the maximum number of traces to be included for updating state of the central store in a single request.
        description: >
          This setting controls the number of traces sent to the central store at
          the same time when Refinery is updating the state of the central store.

      - name: StateTicker
        firstVersion: v2.6
        type: duration
        valuetype: nondefault
        default: 1s
        reload: true
        summary: is the duration of the ticker that periodically updates the state of the central store.
        description: >
          This ticker is used to periodically update the state of the spans in
          the central store. Making it shorter will decrease latency in the
          central store at the expense of increased CPU usage.

      - name: SendDelay
        firstVersion: v2.6
        type: duration
        valuetype: nondefault
        default: 2s
        reload: true
        summary: is the duration of the delay before sending spans to the central store.
        description: >
          This delay is used to provide time to allow asynchronous spans to
          arrive after the root span arrives, and before making a trace
          decision. In a heavily async environment, you may want to increase
          this value at the cost of greater latency and increased memory
          consumption in the central store.

      - name: TraceTimeout
        firstVersion: v2.6
        type: duration
        valuetype: nondefault
        default: 1m
        validations:
          - type: minimum
            arg: 1s
        reload: true
        summary: is the maximum duration after which a trace is considered to have timed out.
        description: >
          This value determines how long after receiving the first span that
          Refinery will wait for a root span to arrive. If a root span does not
          arrive within this time, then the trace decision will be made with
          whatever information is available.

          Increasing this value can improve the accuracy of trace decisions at
          the cost of increased memory consumption in the central store.

      - name: DecisionTimeout
        firstVersion: v2.6
        type: duration
        valuetype: nondefault
        default: 3s
        reload: true
        summary: is the time the central store will wait to receive a trace decision from Refinery
        description: >
          This value controls how long the central store will wait for a trace
          decision from Refinery after assigning it; the only reason this should
          happen is if a Refinery crashes or is forcibly shut down. TODO: not
          sure we need to expose this.

      - name: ReaperRunInterval
        firstVersion: v2.6
        type: duration
        valuetype: nondefault
        default: 1h
        reload: true
        summary: is the interval at which the reaper runs to clean up expired traces.
        description: >
          This value determines how often the reaper runs to clean up expired traces
          in the central store. TODO: don't expose this?
