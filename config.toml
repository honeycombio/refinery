#####################
## Samproxy Config ##
#####################

# ListenAddr is the IP and port on which to listen for incoming events. Incoming
# traffic is expected to be HTTP, so if using SSL put something like nginx in
# front to do the decryption.
# Not eligible for live reload.
ListenAddr = "0.0.0.0:8080"

# APIKeys is a list of Honeycomb API keys that the proxy will accept. This list
# only applies to events - other Honeycomb API actions will fall through to the
# upstream API directly.
# Adding keys here causes two things to happen:
# * on startup, Samproxy will validate the API keys against the Honeycomb API
# * during operation, events arriving with API keys not in this list will be
# rejected with an HTTP 401 error If an API key that is a literal '*' is in the
# list, all API keys are accepted.
# Eligible for live reload.
APIKeys = [
	# "replace-me",
	# "more-optional-keys",
	"*",                   # wildcard accept all keys
	]

# Peers is the list of other servers participating in this proxy cluster. Events
# will be sharded evenly across all peers based on the Trace ID. Values here
# should be the base URL used to access the peer, and should include scheme,
# hostname (or ip address) and port (if it's non-standard).
# Eligible for live reload.
Peers = [
	"http://127.0.0.1:8080",
	# "http://127.0.0.1:8081",
	# "http://10.1.2.3.4:8080",
	# "http://samproxy-1231:8080",
	# "http://peer-3.fqdn" // assumes port 80
]

# HoneycombAPI is the URL for the upstream Honeycomb API.
# Eligible for live reload.
HoneycombAPI = "https://api.honeycomb.io"

# SendDelay is a short timer that will be triggered when a trace is complete.
# Samproxy will wait this duration before actually sending the trace.  The
# reason for this short delay is to allow for small network delays or clock
# jitters to elapse and any final spans to arrive before actually sending the
# trace. This timer is in seconds. Set to 0 for immediate
# sends.
# Eligible for live reload.
SendDelay = 2

# TraceTimeout is a long timer; it represents the outside boundary of how long
# to wait before sending an incomplete trace. Normally traces are sent when the
# root span arrives. Sometimes the root span never arrives (due to crashes or
# whatever), and this timer will send a trace even without having received the
# root span. If you have particularly long-lived traces you should increase this
# timer. This timer is in seconds.
# Eligible for live reload.
TraceTimeout = 60

# LoggingLevel is the level above which we should log. Debug is very verbose,
# and should only be used in pre-production environments. Info is the
# recommended level. Valid options are "debug", "info", "error", and
# "panic"
# Not eligible for live reload.
LoggingLevel = "debug"


############################
## Implementation Choices ##
############################

# Each of the config options below chooses an implementation of a Samproxy
# component to use. Depending on the choice there may be more configuration
# required below in the section for that choice. Changing implementation choices
# requires a process restart; these changes will not be picked up by a live
# config reload. (Individual config options for a given implementation may be
# eligible for live reload).

# Collector describes which collector to use for collecting traces. The only
# current valid option is "InMemCollector".. More can be added by adding
# implementations of the Collector interface.
Collector = "InMemCollector"

# Sampler describes which sampling algorithm to use to sample traces. Valid
# choices are "DeterministicSampler" and "DynamicSampler". The deterministic
# sampler is a random sampler - each trace has equal chance of being sampled
# (and that probability is set by the sample rate). The dynamic sampler requires
# a list of fields to use from the trace and will choose a sample rate based on
# the frequency of the values contained in those fields.
Sampler = "DynamicSampler"

# Logger describes which logger to use for Samproxy logs. Valid options are
# "logrus" and "honeycomb". The logrus option will write logs to STDOUT and the
# honeycomb option will send them to a Honeycomb dataset.
Logger = "logrus"

# Metrics describes which service to use for Samproxy metrics. Valid options are
# "prometheus" and "honeycomb". The prometheus option starts a listener that
# will reply to a request for /metrics. The honeycomb option will send summary
# metrics to a Honeycomb dataset.
Metrics = "honeycomb"


#########################
## In-Memory Collector ##
#########################

# InMemCollector brings together all the settings that are relevant to
# collecting spans together to make traces.
[InMemCollector]

# The collection cache is used to collect all spans into a trace as well as
# remember the sampling decision for any spans that might come in after the
# trace has been marked "complete" (either by timing out or seeing the root
# span). The number of traces in the cache should be many multiples (100x to
# 1000x) of the total number of concurrently active traces (trace throughput *
# trace duration).
# Eligible for live reload. Growing the cache capacity with a live config reload
# is fine. Avoid shrinking it with a live reload (you can, but it may cause
# temporary odd sampling decisions).
CacheCapacity = 1000

[[SamplerConfig]]

	[SamplerConfig._default]

		# DeterministicSampler is a section of the config for manipulating the
		# Deterministic Sampler implementation. This is the simplest sampling algorithm
		# - it is a static sample rate, choosing traces randomly to either keep or send
		# (at the appropriate rate). It is not influenced by the contents of the trace.
		Sampler = "DeterministicSampler"

		# SampleRate is the rate at which to sample. It indicates a ratio, where one
		# sample trace is kept for every n traces seen. For example, a SampleRate of 30
		# will keep 1 out of every 30 traces. The choice on whether to keep any specific
		# trace is random, so the rate is approximate.
		# Eligible for live reload.
		SampleRate = 1

	[SamplerConfig.dataset1]

		# DynamicSampler is a section of the config for manipulating the Dynamic Sampler
		# implementation. This sampler collects the values of a number of fields from a
		# trace and uses them to form a key. This key is handed to the standard dynamic
		# sampler algorithm which generates a sample rate based on the frequency with
		# which that key has appeared in the previous 30 seconds. See
		# https://github.com/honeycombio/dynsampler-go for more detail on the mechanics
		# of the dynamic sampler.  This sampler uses the AvgSampleRate algorithm from
		# that package.
		Sampler = "DynamicSampler"

		# SampleRate is the goal rate at which to sample. It indicates a ratio, where
		# one sample trace is kept for every n traces seen. For example, a SampleRate of
		# 30 will keep 1 out of every 30 traces. This rate is handed to the dynamic
		# sampler, who assigns a sample rate for each trace based on the fields selected
		# from that trace.
		# Eligible for live reload.
		SampleRate = 2

		# FieldList is a list of all the field names to use to form the key that will be
		# handed to the dynamic sampler. The cardinality of the combination of values
		# from all of these keys should be reasonable in the face of the frequency of
		# those keys. If the combination of fields in these keys essentially makes them
		# unique, the dynamic sampler will do no sampling.  If the keys have too few
		# values, you won't get samples of the most interesting traces. A good key
		# selection will have consistent values for high frequency boring traffic and
		# unique values for outliers and interesting traffic. Including an error field
		# (or something like HTTP status code) is an excellent choice. As an example,
		# assuming 30 or so endpoints, a combination of HTTP endpoint and status code
		# would be a good set of keys in order to let you see accurately use of all
		# endpoints and call out when there is failing traffic to any endpoint. Field
		# names may come from any span in the trace.
		# Eligible for live reload.
		FieldList = ["request.method","response.status_code"]

		# UseTraceLength will add the number of spans in the trace in to the dynamic
		# sampler as part of the key. The number of spans is exact, so if there are
		# normally small variations in trace length you may want to leave this off. If
		# traces are consistent lengths and changes in trace length is a useful
		# indicator of traces you'd like to see in Honeycomb, set this to true.
		# Eligible for live reload.
		UseTraceLength = true

		# AddSampleRateKeyToTrace when this is set to true, the sampler will add a field
		# to the root span of the trace containing the key used by the sampler to decide
		# the sample rate. This can be helpful in understanding why the sampler is
		# making certain decisions about sample rate and help you understand how to
		# better choose the sample rate key (aka the FieldList setting above) to use.
		AddSampleRateKeyToTrace = true

		# AddSampleRateKeyToTraceField is the name of the field the sampler will use
		# when adding the sample rate key to the trace. This setting is only used when
		# AddSampleRateKeyToTrace is true.
		AddSampleRateKeyToTraceField = "meta.samproxy.dynsampler_key"

	[SamplerConfig.dataset2]

		Sampler = "DeterministicSampler"
		SampleRate = 10

###################
## Logrus Logger ##
###################

# LogrusLogger is a section of the config only used if you are using the
# LogrusLogger to send all logs to STDOUT using the logrus package. If you are
# using a different logger (eg honeycomb logger) you can leave all this
# commented out.
[LogrusLogger]

# logrus logger currently has no options!

######################
## Honeycomb Logger ##
######################

# HoneycombLogger is a section of the config only used if you are using the
# HoneycombLogger to send all logs to a Honeycomb Dataset. If you are using a
# different logger (eg file-based logger) you can leave all this commented out.

[HoneycombLogger]

# LoggerHoneycombAPI is the URL for the upstream Honeycomb API.
# Eligible for live reload.
LoggerHoneycombAPI = "https://api.honeycomb.io"

# LoggerAPIKey is the API key to use to send log events to the Honeycomb logging
# dataset. This is separate from the APIKeys used to authenticate regular
# traffic.
# Eligible for live reload.
LoggerAPIKey = "abcd1234"

# LoggerDataset is the name of the dataset to which to send Samproxy logs
# Eligible for live reload.
LoggerDataset = "Samproxy Logs"


#######################
## Honeycomb Metrics ##
#######################

# HoneycombMetrics is a section of the config only used if you are using the
# HoneycombMetrics to send all metrics to a Honeycomb Dataset. If you are using a
# different metrics service (eg prometheus or metricsd) you can leave all this
# commented out.

[HoneycombMetrics]

# MetricsHoneycombAPI is the URL for the upstream Honeycomb API.
# Eligible for live reload.
MetricsHoneycombAPI = "https://api.honeycomb.io"

# MetricsAPIKey is the API key to use to send log events to the Honeycomb logging
# dataset. This is separate from the APIKeys used to authenticate regular
# traffic.
# Eligible for live reload.
MetricsAPIKey = "abcd1234"

# MetricsDataset is the name of the dataset to which to send Samproxy metrics
# Eligible for live reload.
MetricsDataset = "Samproxy Metrics"

# MetricsReportingInterval is the frequency (in seconds) to send metric events
# to Honeycomb. Between 1 and 60 is recommended.
# Not eligible for live reload.
MetricsReportingInterval = 3


#####################@##
## Prometheus Metrics ##
#####################@##

[PrometheusMetrics]

# MetricsListenAddr determines the interface and port on which Prometheus will
# listen for requests for /metrics. Must be different from the main Samproxy
# listener.
# Not eligible for live reload.
MetricsListenAddr = "localhost:2112"
